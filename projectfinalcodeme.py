# -*- coding: utf-8 -*-
"""Projectfinalcodeme.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lkt0n-G7Dv9hCv1-2ldpbzWoogbe3xZ-
"""

#READING OF THE DATASET USING THE PANDAS AND DISPLAYING THE DATASET
import pandas as pd #used for the data processing
data1=pd.read_csv("/content/prevalence-by-mental-and-substance-use-disorder.csv")
#THIS DATASET CONTAINS 7 DIFFERENT MENTAL DISORDERS

data2=pd.read_csv("/content/mental-and-substance-use-as-share-of-disease (1).csv")
#THIS DATASET CONTAINS THE PERCENTAGE OF MENTAL DISORDERS IN ALL AGE

#IGNORING THE WARNINGS
import warnings
warnings.filterwarnings('ignore')

data = pd.merge(data1, data2)
data

#THE DATATYPES OF THE FOLLOWING FEATURE COLUMNS
data.dtypes

#CHECKING WHETHER THERE IS ANY ENTRY WHICH IS EMPTY OR NOT
data.isnull().sum()

#DESCRIBING THE ROWS AND COLUMNS IN THE DATASET
data.size,data.shape

#DROPPING THE UNWANTED FEATURE COLUMNS
data.drop('Code',axis=1,inplace=True)

#MAKING EASIER TO UNDERSTAND THE FEATURE COLUMNS LIKE ,COLUMNS ARE CONVERTED INTO SIMPLER NAMES TO UNDERSTAND
data.set_axis(['Country','Year','Schizophrenia', 'Bipolar_disorder', 'Eating_disorder','Anxiety','drug_usage','depression','alcohol',
               '% of mental_fitness'], axis='columns', inplace=True)
data

#COLUMNS NAMES
data.columns

data.value_counts()

#INFORMATION ABOUT THE DATASET USED
data.info()

#THIS LIBRARY IS USED TO PLOT AND VISUALISE THE TREND IN THE DATASET
import numpy as np
!pip install matplotlib
import matplotlib.pyplot as plt

#PLOTTING OF THE GRAPH
x = data["Year"]
y = data["% of mental_fitness"]

plt.bar(x,y,color="grey")
plt.xlabel("YEARS----->", c = "black", size = 10)
plt.ylabel("PERCENTAGE OF MENTAL DISORDER----->", c = "red", size = 7)
plt.title("TREND IN THE MENTAL DISORDER YEAR BY YEAR(1990-2019)", c = "black", size = 20)
print("This clearly tells us that Mental Health is degrading day by day. ")

#RESULT OF CORRELATION BETWEEN THE PERCENTAGE OF MENTAL HEALTH AND MENTAL DISORDERS
import seaborn as sns
plt.figure(figsize=(9,4))
sns.heatmap(data.corr(),annot=True)

#RELATIONSHIP BETWEEN THE DEPRESSION DISORDER AND MENTAL HEALTH WITH OVER YEARS
#YEARS(1990-2019)
fig = plt.figure(figsize = (7,5))
plt.scatter(data['Year'],data['depression'])
plt.xlabel("<---YEARS---> ")
plt.ylabel("<---DEPRESSION RATE --->")

#RELATIONSHIP BETWEEN THE DEPRESSION DISORDER AND MENTAL HEALTH WITH OVER YEARS
#YEARS(1990-2019)
fig = plt.figure(figsize = (7,5))
plt.scatter(data['Year'],data[ 'drug_usage'])
plt.xlabel("<---YEARS---> ")
plt.ylabel("<---DRUG USAGE RATE --->")
from sklearn.preprocessing import LabelEncoder
he= LabelEncoder()
data['tr_da']= he.fit_transform(data['Country'])
print(data)

x=data[["tr_da", 'Year','Schizophrenia', 'Bipolar_disorder','Eating_disorder',
        'Anxiety', 'drug_usage', 'depression', 'alcohol']]
y=data['% of mental_fitness']

#APPLYING THE LINEAR-REGRESSION MODEL ON THIS DATASET TO PREDICT THE PERCENTAGE OF MENTAL HEALTH CHANGING OVER YEARS
#AND SPLITTING THE DATA INTO TRAINING AND TESTING DATAS
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
model=LinearRegression()
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30)
model.fit(x_train,y_train)
model.score(x_test,y_test)

y_pred1 = model.predict(x_test)
y_pred = [round(x) for x in y_pred1]
y_pred

x=data[[ 'tr_da', 'Year','Schizophrenia', 'Bipolar_disorder',
       'Eating_disorder', 'Anxiety', 'drug_usage', 'depression', 'alcohol']]
y=data['% of mental_fitness']

#APPLYING LOGISTIC REGRESSION ON THE DATASET
from sklearn import utils
from sklearn.linear_model import LogisticRegression
print(utils.multiclass.type_of_target(y))
y=y.astype(int)
model1=LogisticRegression()
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.30)
model1.fit(x_train,y_train)
model1.score(x_test,y_test)

#USING DECISION-TREE CLASSIFIER WE GET 100% ACCURACY
from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier()
model.fit(x_train,y_train)
model.score(x_test,y_test)